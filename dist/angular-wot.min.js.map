{"version":3,"sources":["wot.module.js","td-parser.service.js","thing-client.service.js"],"names":["wot","angular","module","factory","$http","CoAP","TdParser","numericTypes","isNumericType","xsdType","indexOf","createThingfromOldTd","parsedTd","newThing","name","metadata","properties","actions","uri","protocols","HTTP","interactions","filter","interaction","forEach","property","push","writable","outputData","autoUpdate","history","parent","isNumeric","action","xsdParamType","inputData","xsdReturnType","chooseUriIndex","uriArray","prefIdx","i","length","scheme","substring","pathConcat","left","right","slice","createThingfromNewTd","uris","Array","uriIndex","Error","valueType","type","hrefs","paramType","numericParamType","inputProperties","createThing","tdObj","fromUrl","url","get","then","res","JSON","parse","data","parseJson","json","td","ThingClient","restcall","method","payload","req","doCoapReq","defaults","transformResponse","readProperty","thing","applyNewValue","value","shift","writeProperty","put","callAction","param","post"],"mappings":"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","file":"angular-wot.min.js","sourcesContent":["var wot = angular.module(\"wot\",['coap']);\n","angular.module(\"wot\").factory('TdParser', ['$http', 'CoAP',\n    function TdParserFactory($http, CoAP) {\n        var TdParser = {};\n\n        var numericTypes = [\n            'xsd:byte',\n            'xsd:float',\n            'xsd:decimal',\n            'xsd:int',\n            'xsd:long',\n            'xsd:unsignedByte',\n            'xsd:unsignedShort'\n        ];\n\n        TdParser.isNumericType = function isNumericType(xsdType) {\n            return numericTypes.indexOf(xsdType) != -1;\n        }\n        \n        var createThingfromOldTd =  function createThingfromOldTd(parsedTd) {\n            var newThing = {\n                'name': parsedTd.metadata.name,\n                'properties': [],\n                'actions': [],\n                'uri': (parsedTd.metadata.protocols.HTTP) ? parsedTd.metadata.protocols.HTTP.uri : parsedTd.metadata.protocols.CoAP.uri, //FIXME dodgy\n                'protocols': parsedTd.metadata.protocols\n            };\n\n            //add all properties\n            parsedTd.interactions\n                .filter(function isProperty(interaction) {\n                    return interaction[\"@type\"] == \"Property\";\n                })\n                .forEach(function addProperty(property) {\n                    newThing.properties.push({\n                        'name': property.name,\n                        'writable': property.writable,\n                        'xsdType': property.outputData,\n                        'autoUpdate': false,\n                        'history': [],\n                        'parent': newThing,\n                        'isNumeric': TdParser.isNumericType(property.outputData)\n                    });\n                });\n\n            //add actions\n            parsedTd.interactions\n                .filter(function isAction(interaction) {\n                    return interaction[\"@type\"] == \"Action\";\n                })\n                .forEach(function addAction(action) {\n                    newThing.actions.push({\n                        'name': action.name,\n                        'xsdParamType': action.inputData,\n                        'xsdReturnType': action.outputData,\n                        'parent': newThing\n                    });\n                });\n\n            return newThing;\n        }\n\n        var chooseUriIndex = function chooseUriIndex(uriArray) {\n            prefIdx = -1;\n            for(i=0;i<uriArray.length;i++) {\n                var uri = uriArray[i];\n                var scheme = uri.substring(0,uri.indexOf(':'));\n                if(scheme === 'http')\n                    return i;\n                else if (scheme === 'coap')\n                    prefIdx = i;\n            };\n            return prefIdx;\n            \n        }\n\n        var pathConcat = function pathConcat(left, right) {\n            if(left.slice(-1) === '/') {\n               return left + right; \n            } else {\n                return left + '/' + right;\n            }\n        }\n\n        var createThingfromNewTd =  function createThingfromNewTd(parsedTd) {\n            var uriArray = ( parsedTd.uris instanceof Array ) ? parsedTd.uris : [parsedTd.uris];\n            var uriIndex = chooseUriIndex(uriArray);\n            if(uriIndex === -1) throw Error(\"no suitable Protocols found\")\n            var newThing = {\n                'name': parsedTd.name,\n                'properties': [],\n                'actions': [],\n                'uri': uriArray[uriIndex]\n            };\n\n            //add all properties\n            if(parsedTd.properties) parsedTd.properties\n                .forEach(function addProperty(property) {\n                    newThing.properties.push({\n                        'name': property.name,\n                        'writable': property.writable,\n                        'xsdType': property.valueType,\n                        'type': property.valueType['type'],\n                        'uri': pathConcat(newThing.uri,property.hrefs[uriIndex]),\n                        'autoUpdate': false,\n                        'history': [],\n                        'parent': newThing,\n                        'isNumeric': TdParser.isNumericType(property.valueType),\n                        'properties': property.valueType['properties']\n                    });\n                });\n\n            //add actions\n            if(parsedTd.actions) parsedTd.actions\n                .forEach(function addAction(action) {\n                    var paramType = (action.inputData) ? action.inputData.valueType['type'] :\"\";\n                    \n                    newThing.actions.push({\n                        'name': action.name,\n                        'xsdParamType': paramType, //misleading name: xsd\n                        'numericParamType': TdParser.isNumericType(paramType), //Unused in UI\n                        'inputProperties': (action.inputData) ? action.inputData.valueType['properties'] :\"\",\n                        'xsdReturnType': (action.outputData) ? action.outputData.valueType['type'] : \"\", //should not be xsd\n                        'parent': newThing,\n                        'uri' : pathConcat(newThing.uri,action.hrefs[uriIndex])\n                    });\n                });\n\n            return newThing;\n        }\n\n       TdParser.createThing = function dualParseTD(tdObj){\n            if(tdObj.metadata)\n                return createThingfromOldTd(tdObj);\n               else\n                return createThingfromNewTd(tdObj);\n        }\n\n        TdParser.fromUrl = function fromUrl(url) {\n            if (url.substring(0, 4) == 'coap') {\n                return CoAP.get(url)\n                    .then(function(res) {\n                        return JSON.parse(res)\n                    })\n                    .then(TdParser.createThing)\n            } else\n                return $http.get(url).then(function(res) {\n                    return res.data\n                }).then(TdParser.createThing)\n        }\n\n        TdParser.parseJson = function parseJson(json) {\n            // TODO actually parse as JSON-LD, e.g. using io-informatics/angular-jsonld\n            var td = JSON.parse(json);\n            return TdParser.createThing(td);\n        }\n\n        return TdParser;\n    }\n]);\n","angular.module(\"wot\").factory('ThingClient', ['$http', 'CoAP',\n    function ThingClientFactory($http, CoAP) {\n        var ThingClient = {};\n\n        var restcall = function restcall(method, uri, payload) {\n            var scheme = uri.substring(0, uri.indexOf(':'));\n            if (scheme === 'http') {\n                var req = {\n                    'method': method,\n                    'url': uri,\n                    'data': payload\n                };\n                return $http(req);\n            } else if (scheme === 'coap') {\n                return CoAP.doCoapReq(method, uri, payload)\n                    .then($http.defaults.transformResponse);\n            } else\n                throw Error('unknown uri scheme')\n        }\n\n        ThingClient.readProperty = function readProperty(thing, property) {\n            function applyNewValue(value) {\n                property.value = value;\n                property.history.push(value);\n\n                //ensure size\n                while (property.history.length >= 20) property.history.shift();\n            }\n\n            if (property.uri) {\n                return restcall('GET', property.uri)\n                    .then(function(res) { return res.data.value })\n                    .then(applyNewValue);\n            }\n\n            if (thing.protocols['HTTP']) {\n                return $http.get(thing.protocols['HTTP'].uri + \"/\" + property.name)\n                    .then(function(res) { return res.data.value })\n                    .then(applyNewValue);\n            } else if (thing.protocols['CoAP']) {\n                return CoAP.get(thing.protocols['CoAP'].uri + \"/\" + property.name)\n                    .then(function(res) {\n                        return JSON.parse(res).value\n                    })\n                    .then(applyNewValue);\n            }\n        }\n\n        ThingClient.writeProperty = function writeProperty(thing, property) {\n            if (property.uri) {\n                return restcall('PUT', property.uri, { \"value\": property.value })\n            }\n\n            if (thing.protocols['HTTP']) {\n                return $http.put(thing.protocols['HTTP'].uri + \"/\" + property.name, { \"value\": property.value })\n            } else {\n                return CoAP.put(thing.protocols['CoAP'].uri + \"/\" + property.name, { \"value\": property.value })\n            }\n        }\n\n        ThingClient.callAction = function callAction(thing, action, param) {\n            var payload = { \"value\": param };\n            if (action.xsdParamType === 'WoTScript') {\n                payload = param;\n            };\n\n            if (action.uri) {\n                return restcall('POST', action.uri, payload)\n            }\n\n            if (thing.protocols['HTTP']) {\n                return $http.post(thing.protocols['HTTP'].uri + \"/\" + action.name, payload);\n            } else {\n                return CoAP.post(thing.protocols['CoAP'].uri + \"/\" + action.name, payload);\n            }\n        }\n\n        return ThingClient;\n    }\n]);\n"],"sourceRoot":"/source/"}