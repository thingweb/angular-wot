{"version":3,"sources":["wot.module.js","td-parser.service.js","thing-client.service.js"],"names":["wot","angular","module","factory","$http","CoAP","TdParser","numericTypes","isNumericType","xsdType","indexOf","createThingfromOldTd","parsedTd","newThing","name","metadata","properties","actions","uri","protocols","HTTP","interactions","filter","interaction","forEach","property","push","writable","outputData","autoUpdate","history","parent","isNumeric","action","xsdParamType","inputData","xsdReturnType","chooseUriIndex","uriArray","prefIdx","i","length","scheme","substring","pathConcat","left","right","slice","createThingfromNewTd","uris","Array","uriIndex","Error","valueType","type","hrefs","paramType","numericParamType","inputProperties","createThing","tdObj","tdObj_V1","transformTDV2ObjToV1Obj","console","log","fromUrl","url","get","then","res","JSON","parse","data","parseJson","json","td","transformTDV2StringToV1String","td2","td1","isArray","_i","_a","inter","fixLinksV2toHrefsEncodingsV1","link","stringify","ThingClient","restcall","method","payload","req","doCoapReq","defaults","transformResponse","readProperty","thing","applyNewValue","value","shift","writeProperty","put","callAction","param","post"],"mappings":"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","file":"angular-wot.min.js","sourcesContent":["var wot = angular.module(\"wot\",['coap']);\r\n","angular.module(\"wot\").factory('TdParser', ['$http', 'CoAP',\r\n    function TdParserFactory($http, CoAP) {\r\n        var TdParser = {};\r\n\r\n        var numericTypes = [\r\n            'xsd:byte',\r\n            'xsd:float',\r\n            'xsd:decimal',\r\n            'xsd:int',\r\n            'xsd:long',\r\n            'xsd:unsignedByte',\r\n            'xsd:unsignedShort'\r\n        ];\r\n\r\n        TdParser.isNumericType = function isNumericType(xsdType) {\r\n            return numericTypes.indexOf(xsdType) != -1;\r\n        }\r\n        \r\n        var createThingfromOldTd =  function createThingfromOldTd(parsedTd) {\r\n            var newThing = {\r\n                'name': parsedTd.metadata.name,\r\n                'properties': [],\r\n                'actions': [],\r\n                'uri': (parsedTd.metadata.protocols.HTTP) ? parsedTd.metadata.protocols.HTTP.uri : parsedTd.metadata.protocols.CoAP.uri, //FIXME dodgy\r\n                'protocols': parsedTd.metadata.protocols\r\n            };\r\n\r\n            //add all properties\r\n            parsedTd.interactions\r\n                .filter(function isProperty(interaction) {\r\n                    return interaction[\"@type\"] == \"Property\";\r\n                })\r\n                .forEach(function addProperty(property) {\r\n                    newThing.properties.push({\r\n                        'name': property.name,\r\n                        'writable': property.writable,\r\n                        'xsdType': property.outputData,\r\n                        'autoUpdate': false,\r\n                        'history': [],\r\n                        'parent': newThing,\r\n                        'isNumeric': TdParser.isNumericType(property.outputData)\r\n                    });\r\n                });\r\n\r\n            //add actions\r\n            parsedTd.interactions\r\n                .filter(function isAction(interaction) {\r\n                    return interaction[\"@type\"] == \"Action\";\r\n                })\r\n                .forEach(function addAction(action) {\r\n                    newThing.actions.push({\r\n                        'name': action.name,\r\n                        'xsdParamType': action.inputData,\r\n                        'xsdReturnType': action.outputData,\r\n                        'parent': newThing\r\n                    });\r\n                });\r\n\r\n            return newThing;\r\n        }\r\n\r\n        var chooseUriIndex = function chooseUriIndex(uriArray) {\r\n            prefIdx = -1;\r\n            for(i=0;i<uriArray.length;i++) {\r\n                var uri = uriArray[i];\r\n                var scheme = uri.substring(0,uri.indexOf(':'));\r\n                if(scheme === 'http')\r\n                    return i;\r\n                else if (scheme === 'coap')\r\n                    prefIdx = i;\r\n            };\r\n            return prefIdx;\r\n            \r\n        }\r\n\r\n        var pathConcat = function pathConcat(left, right) {\r\n            if(left.slice(-1) === '/') {\r\n               return left + right; \r\n            } else {\r\n                return left + '/' + right;\r\n            }\r\n        }\r\n\r\n        var createThingfromNewTd =  function createThingfromNewTd(parsedTd) {\r\n            var uriArray = ( parsedTd.uris instanceof Array ) ? parsedTd.uris : [parsedTd.uris];\r\n            var uriIndex = chooseUriIndex(uriArray);\r\n            if(uriIndex === -1) throw Error(\"no suitable Protocols found\")\r\n            var newThing = {\r\n                'name': parsedTd.name,\r\n                'properties': [],\r\n                'actions': [],\r\n                'uri': uriArray[uriIndex]\r\n            };\r\n\r\n            //add all properties\r\n            if(parsedTd.properties) parsedTd.properties\r\n                .forEach(function addProperty(property) {\r\n                    newThing.properties.push({\r\n                        'name': property.name,\r\n                        'writable': property.writable,\r\n                        'xsdType': property.valueType,\r\n                        'type': property.valueType['type'],\r\n                        'uri': pathConcat(newThing.uri,property.hrefs[uriIndex]),\r\n                        'autoUpdate': false,\r\n                        'history': [],\r\n                        'parent': newThing,\r\n                        'isNumeric': TdParser.isNumericType(property.valueType),\r\n                        'properties': property.valueType['properties']\r\n                    });\r\n                });\r\n\r\n            //add actions\r\n            if(parsedTd.actions) parsedTd.actions\r\n                .forEach(function addAction(action) {\r\n                    var paramType = (action.inputData) ? action.inputData.valueType['type'] :\"\";\r\n                    \r\n                    newThing.actions.push({\r\n                        'name': action.name,\r\n                        'xsdParamType': paramType, //misleading name: xsd\r\n                        'numericParamType': TdParser.isNumericType(paramType), //Unused in UI\r\n                        'inputProperties': (action.inputData) ? action.inputData.valueType['properties'] :\"\",\r\n                        'xsdReturnType': (action.outputData) ? action.outputData.valueType['type'] : \"\", //should not be xsd\r\n                        'parent': newThing,\r\n                        'uri' : pathConcat(newThing.uri,action.hrefs[uriIndex])\r\n                    });\r\n                });\r\n\r\n            return newThing;\r\n        }\r\n\r\n       TdParser.createThing = function dualParseTD(tdObj){\r\n            if(tdObj.metadata) {\r\n                return createThingfromOldTd(tdObj);\r\n\t\t\t} else {\r\n\t\t\t\tif(tdObj.interactions) {\r\n\t\t\t\t\t// TD http://w3c.github.io/wot/current-practices/wot-practices-santa-clara-2017.html\r\n\t\t\t\t\t// --> use transformer\r\n\t\t\t\t\tvar tdObj_V1 = transformTDV2ObjToV1Obj(tdObj);\r\n\t\t\t\t\tconsole.log(tdObj_V1);\r\n\t\t\t\t\treturn createThingfromNewTd(tdObj_V1);\r\n\t\t\t\t\t// throw \"TODO Santa Clara TD version\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// TD https://w3c.github.io/wot/current-practices/wot-practices-beijing-2016.html\r\n\t\t\t\t\treturn createThingfromNewTd(tdObj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }\r\n\r\n        TdParser.fromUrl = function fromUrl(url) {\r\n            if (url.substring(0, 4) == 'coap') {\r\n                return CoAP.get(url)\r\n                    .then(function(res) {\r\n                        return JSON.parse(res)\r\n                    })\r\n                    .then(TdParser.createThing)\r\n            } else\r\n                return $http.get(url).then(function(res) {\r\n                    return res.data\r\n                }).then(TdParser.createThing)\r\n        }\r\n\r\n        TdParser.parseJson = function parseJson(json) {\r\n            // TODO actually parse as JSON-LD, e.g. using io-informatics/angular-jsonld\r\n            var td = JSON.parse(json);\r\n            return TdParser.createThing(td);\r\n        }\r\n\t\t\r\n\t\t\r\n\t\t// ==========================================================\r\n\t\t// START COPY\r\n\t\t// JUST A COPY OF https://github.com/thingweb/node-wot/blob/master/src/td/tdtransformer.ts\r\n\t\t// ==========================================================\r\n\t\t\r\n\t\tvar transformTDV2StringToV1String = function transformTDV2StringToV1String(td2) {\r\n\t\t\tvar td1 = JSON.parse(td2);\r\n\t\t\tif (td1[\"base\"] != null) {\r\n\t\t\t\ttd1[\"uris\"] = [];\r\n\t\t\t\ttd1[\"uris\"].push(td1[\"base\"]);\r\n\t\t\t\tdelete td1[\"base\"];\r\n\t\t\t}\r\n\t\t\tif (td1[\"interactions\"] != null && Array.isArray(td1[\"interactions\"])) {\r\n\t\t\t\tfor (var _i = 0, _a = td1[\"interactions\"]; _i < _a.length; _i++) {\r\n\t\t\t\t\tvar inter = _a[_i];\r\n\t\t\t\t\tif (inter[\"@type\"] != null && Array.isArray(inter[\"@type\"])) {\r\n\t\t\t\t\t\tif (inter[\"@type\"].indexOf(\"Property\") >= 0) {\r\n\t\t\t\t\t\t\tif (td1[\"properties\"] == null) {\r\n\t\t\t\t\t\t\t\ttd1[\"properties\"] = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttd1[\"properties\"].push(inter);\r\n\t\t\t\t\t\t\tif (inter[\"outputData\"] != null && inter[\"outputData\"][\"valueType\"] != null) {\r\n\t\t\t\t\t\t\t\tinter[\"valueType\"] = inter[\"outputData\"][\"valueType\"];\r\n\t\t\t\t\t\t\t\tdelete inter[\"outputData\"];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfixLinksV2toHrefsEncodingsV1(td1, inter);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (inter[\"@type\"].indexOf(\"Action\") >= 0) {\r\n\t\t\t\t\t\t\tif (td1[\"actions\"] == null) {\r\n\t\t\t\t\t\t\t\ttd1[\"actions\"] = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttd1[\"actions\"].push(inter);\r\n\t\t\t\t\t\t\tfixLinksV2toHrefsEncodingsV1(td1, inter);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (inter[\"@type\"].indexOf(\"Event\") >= 0) {\r\n\t\t\t\t\t\t\tif (td1[\"events\"] == null) {\r\n\t\t\t\t\t\t\t\ttd1[\"events\"] = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttd1[\"events\"].push(inter);\r\n\t\t\t\t\t\t\tif (inter[\"outputData\"] != null && inter[\"outputData\"][\"valueType\"] != null) {\r\n\t\t\t\t\t\t\t\tinter[\"valueType\"] = inter[\"outputData\"][\"valueType\"];\r\n\t\t\t\t\t\t\t\tdelete inter[\"outputData\"];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfixLinksV2toHrefsEncodingsV1(td1, inter);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdelete td1[\"interactions\"];\r\n\t\t\t}\r\n\t\t\treturn td1;\r\n\t\t}\r\n\t\t\r\n\t\tvar fixLinksV2toHrefsEncodingsV1 = function fixLinksV2toHrefsEncodingsV1(td1, inter) {\r\n\t\t\tif (inter[\"links\"] != null && Array.isArray(inter[\"links\"])) {\r\n\t\t\t\tfor (var _i = 0, _a = inter[\"links\"]; _i < _a.length; _i++) {\r\n\t\t\t\t\tvar link = _a[_i];\r\n\t\t\t\t\tif (inter[\"hrefs\"] == null) {\r\n\t\t\t\t\t\tinter[\"hrefs\"] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinter[\"hrefs\"].push(link[\"href\"]);\r\n\t\t\t\t\tif (td1[\"encodings\"] == null) {\r\n\t\t\t\t\t\ttd1[\"encodings\"] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (td1[\"encodings\"].indexOf(link[\"mediaType\"]) < 0) {\r\n\t\t\t\t\t\ttd1[\"encodings\"].push(link[\"mediaType\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdelete inter[\"links\"];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar transformTDV2ObjToV1Obj = function transformTDV2ObjToV1Obj(td2) {\r\n\t\t\treturn transformTDV2StringToV1String(JSON.stringify(td2));\r\n\t\t}\r\n\t\t\r\n\t\t// ==========================================================\r\n\t\t// END COPY\r\n\t\t// ==========================================================\r\n\t\t \r\n\t\t\r\n\t\t\r\n\t\t\r\n\r\n        return TdParser;\r\n    }\r\n]);\r\n","angular.module(\"wot\").factory('ThingClient', ['$http', 'CoAP',\r\n    function ThingClientFactory($http, CoAP) {\r\n        var ThingClient = {};\r\n\r\n        var restcall = function restcall(method, uri, payload) {\r\n            var scheme = uri.substring(0, uri.indexOf(':'));\r\n            if (scheme === 'http') {\r\n                var req = {\r\n                    'method': method,\r\n                    'url': uri,\r\n                    'data': payload\r\n                };\r\n                return $http(req);\r\n            } else if (scheme === 'coap') {\r\n                return CoAP.doCoapReq(method, uri, JSON.stringify(payload))\r\n                    .then($http.defaults.transformResponse);\r\n            } else\r\n                throw Error('unknown uri scheme')\r\n        }\r\n\r\n        ThingClient.readProperty = function readProperty(thing, property) {\r\n            function applyNewValue(value) {\r\n                property.value = value;\r\n                property.history.push(value);\r\n\r\n                //ensure size\r\n                while (property.history.length >= 20) property.history.shift();\r\n            }\r\n\r\n            if (property.uri) {\r\n                return restcall('GET', property.uri)\r\n                    .then(function (res) {\r\n                        if (res.data)\r\n                            return res.data.value;\r\n                        else\r\n                            return JSON.parse(res).value;\r\n\r\n                    })\r\n                    .then(applyNewValue);\r\n            }\r\n\r\n            if (thing.protocols['HTTP']) {\r\n                return $http.get(thing.protocols['HTTP'].uri + \"/\" + property.name)\r\n                    .then(function (res) { return res.data.value })\r\n                    .then(applyNewValue);\r\n            } else if (thing.protocols['CoAP']) {\r\n                return CoAP.get(thing.protocols['CoAP'].uri + \"/\" + property.name)\r\n                    .then(function (res) {\r\n                        return JSON.parse(res.payload).value\r\n                    })\r\n                    .then(applyNewValue);\r\n            }\r\n        }\r\n\r\n        ThingClient.writeProperty = function writeProperty(thing, property) {\r\n            if (property.uri) {\r\n                return restcall('PUT', property.uri, { \"value\": property.value })\r\n            }\r\n\r\n            if (thing.protocols['HTTP']) {\r\n                return $http.put(thing.protocols['HTTP'].uri + \"/\" + property.name, { \"value\": property.value })\r\n            } else {\r\n                return CoAP.put(thing.protocols['CoAP'].uri + \"/\" + property.name, { \"value\": property.value })\r\n            }\r\n        }\r\n\r\n        ThingClient.callAction = function callAction(thing, action, param) {\r\n            var payload = { \"value\": param };\r\n            if (action.xsdParamType === 'WoTScript') {\r\n                payload = param;\r\n            };\r\n\r\n            if (action.uri) {\r\n                return restcall('POST', action.uri, payload)\r\n            }\r\n\r\n            if (thing.protocols['HTTP']) {\r\n                return $http.post(thing.protocols['HTTP'].uri + \"/\" + action.name, payload);\r\n            } else {\r\n                return CoAP.post(thing.protocols['CoAP'].uri + \"/\" + action.name, payload);\r\n            }\r\n        }\r\n\r\n        return ThingClient;\r\n    }\r\n]);\r\n"]}