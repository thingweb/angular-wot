{"version":3,"sources":["wot.module.js","td-parser.service.js","thing-client.service.js"],"names":["wot","angular","module","factory","$http","CoAP","TdParser","numericTypes","isNumericType","xsdType","indexOf","createThingfromOldTd","parsedTd","newThing","name","metadata","properties","actions","uri","protocols","HTTP","interactions","filter","interaction","forEach","property","push","writable","outputData","autoUpdate","history","parent","isNumeric","action","xsdParamType","inputData","xsdReturnType","chooseUriIndex","uriArray","prefIdx","i","length","scheme","substring","pathConcat","left","right","slice","createThingfromNewTd","uris","Array","uriIndex","Error","valueType","type","hrefs","paramType","numericParamType","inputProperties","createThing","tdObj","fromUrl","url","get","then","res","JSON","parse","data","parseJson","json","td","ThingClient","restcall","method","payload","req","doCoapReq","stringify","defaults","transformResponse","readProperty","thing","applyNewValue","value","shift","writeProperty","put","callAction","param","post"],"mappings":"AAAA,GAAAA,KAAAC,QAAAC,OAAA,OAAA,QCAAD,SAAAC,OAAA,OAAAC,QAAA,YAAA,QAAA,OACA,SAAAC,EAAAC,GACA,GAAAC,MAEAC,GACA,WACA,YACA,cACA,UACA,WACA,mBACA,oBAGAD,GAAAE,cAAA,SAAAC,GACA,MAAA,IAAAF,EAAAG,QAAAD,GAGA,IAAAE,GAAA,SAAAC,GACA,GAAAC,IACAC,KAAAF,EAAAG,SAAAD,KACAE,cACAC,WACAC,IAAAN,EAAAG,SAAAI,UAAA,KAAAP,EAAAG,SAAAI,UAAAC,KAAAF,IAAAN,EAAAG,SAAAI,UAAAd,KAAAa,IACAC,UAAAP,EAAAG,SAAAI,UAkCA,OA9BAP,GAAAS,aACAC,OAAA,SAAAC,GACA,MAAA,YAAAA,EAAA,WAEAC,QAAA,SAAAC,GACAZ,EAAAG,WAAAU,MACAZ,KAAAW,EAAAX,KACAa,SAAAF,EAAAE,SACAlB,QAAAgB,EAAAG,WACAC,YAAA,EACAC,WACAC,OAAAlB,EACAmB,UAAA1B,EAAAE,cAAAiB,EAAAG,gBAKAhB,EAAAS,aACAC,OAAA,SAAAC,GACA,MAAA,UAAAA,EAAA,WAEAC,QAAA,SAAAS,GACApB,EAAAI,QAAAS,MACAZ,KAAAmB,EAAAnB,KACAoB,aAAAD,EAAAE,UACAC,cAAAH,EAAAL,WACAG,OAAAlB,MAIAA,GAGAwB,EAAA,SAAAC,GAEA,IADAC,QAAA,GACAC,EAAA,EAAAA,EAAAF,EAAAG,OAAAD,IAAA,CACA,GAAAtB,GAAAoB,EAAAE,GACAE,EAAAxB,EAAAyB,UAAA,EAAAzB,EAAAR,QAAA,KACA,IAAA,SAAAgC,EACA,MAAAF,EACA,UAAAE,IACAH,QAAAC,GAEA,MAAAD,UAIAK,EAAA,SAAAC,EAAAC,GACA,MAAA,MAAAD,EAAAE,MAAA,IACAF,EAAAC,EAEAD,EAAA,IAAAC,GAIAE,EAAA,SAAApC,GACA,GAAA0B,GAAA1B,EAAAqC,eAAAC,OAAAtC,EAAAqC,MAAArC,EAAAqC,MACAE,EAAAd,EAAAC,EACA,IAAA,KAAAa,EAAA,KAAAC,OAAA,8BACA,IAAAvC,IACAC,KAAAF,EAAAE,KACAE,cACAC,WACAC,IAAAoB,EAAAa,GAoCA,OAhCAvC,GAAAI,YAAAJ,EAAAI,WACAQ,QAAA,SAAAC,GACAZ,EAAAG,WAAAU,MACAZ,KAAAW,EAAAX,KACAa,SAAAF,EAAAE,SACAlB,QAAAgB,EAAA4B,UACAC,KAAA7B,EAAA4B,UAAA,KACAnC,IAAA0B,EAAA/B,EAAAK,IAAAO,EAAA8B,MAAAJ,IACAtB,YAAA,EACAC,WACAC,OAAAlB,EACAmB,UAAA1B,EAAAE,cAAAiB,EAAA4B,WACArC,WAAAS,EAAA4B,UAAA,eAKAzC,EAAAK,SAAAL,EAAAK,QACAO,QAAA,SAAAS,GACA,GAAAuB,GAAAvB,EAAA,UAAAA,EAAAE,UAAAkB,UAAA,KAAA,EAEAxC,GAAAI,QAAAS,MACAZ,KAAAmB,EAAAnB,KACAoB,aAAAsB,EACAC,iBAAAnD,EAAAE,cAAAgD,GACAE,gBAAAzB,EAAA,UAAAA,EAAAE,UAAAkB,UAAA,WAAA,GACAjB,cAAAH,EAAA,WAAAA,EAAAL,WAAAyB,UAAA,KAAA,GACAtB,OAAAlB,EACAK,IAAA0B,EAAA/B,EAAAK,IAAAe,EAAAsB,MAAAJ,QAIAtC,EA6BA,OA1BAP,GAAAqD,YAAA,SAAAC,GACA,MAAAA,GAAA7C,SACAJ,EAAAiD,GAEAZ,EAAAY,IAGAtD,EAAAuD,QAAA,SAAAC,GACA,MAAA,QAAAA,EAAAnB,UAAA,EAAA,GACAtC,EAAA0D,IAAAD,GACAE,KAAA,SAAAC,GACA,MAAAC,MAAAC,MAAAF,KAEAD,KAAA1D,EAAAqD,aAEAvD,EAAA2D,IAAAD,GAAAE,KAAA,SAAAC,GACA,MAAAA,GAAAG,OACAJ,KAAA1D,EAAAqD,cAGArD,EAAA+D,UAAA,SAAAC,GAEA,GAAAC,GAAAL,KAAAC,MAAAG,EACA,OAAAhE,GAAAqD,YAAAY,IAGAjE,KC5JAL,QAAAC,OAAA,OAAAC,QAAA,eAAA,QAAA,OACA,SAAAC,EAAAC,GACA,GAAAmE,MAEAC,EAAA,SAAAC,EAAAxD,EAAAyD,GACA,GAAAjC,GAAAxB,EAAAyB,UAAA,EAAAzB,EAAAR,QAAA,KACA,IAAA,SAAAgC,EAAA,CACA,GAAAkC,IACAF,OAAAA,EACAZ,IAAA5C,EACAkD,KAAAO,EAEA,OAAAvE,GAAAwE,GACA,GAAA,SAAAlC,EACA,MAAArC,GAAAwE,UAAAH,EAAAxD,EAAAgD,KAAAY,UAAAH,IACAX,KAAA5D,EAAA2E,SAAAC,kBAEA,MAAA5B,OAAA,sBAkEA,OA/DAoB,GAAAS,aAAA,SAAAC,EAAAzD,GACA,QAAA0D,GAAAC,GAKA,IAJA3D,EAAA2D,MAAAA,EACA3D,EAAAK,QAAAJ,KAAA0D,GAGA3D,EAAAK,QAAAW,QAAA,IAAAhB,EAAAK,QAAAuD,QAGA,MAAA5D,GAAAP,IACAuD,EAAA,MAAAhD,EAAAP,KACA8C,KAAA,SAAAC,GACA,MAAAA,GAAAG,KACAH,EAAAG,KAAAgB,MAEAlB,KAAAC,MAAAF,GAAAmB,QAGApB,KAAAmB,GAGAD,EAAA/D,UAAA,KACAf,EAAA2D,IAAAmB,EAAA/D,UAAA,KAAAD,IAAA,IAAAO,EAAAX,MACAkD,KAAA,SAAAC,GAAA,MAAAA,GAAAG,KAAAgB,QACApB,KAAAmB,GACAD,EAAA/D,UAAA,KACAd,EAAA0D,IAAAmB,EAAA/D,UAAA,KAAAD,IAAA,IAAAO,EAAAX,MACAkD,KAAA,SAAAC,GACA,MAAAC,MAAAC,MAAAF,EAAAU,SAAAS,QAEApB,KAAAmB,GALA,QASAX,EAAAc,cAAA,SAAAJ,EAAAzD,GACA,MAAAA,GAAAP,IACAuD,EAAA,MAAAhD,EAAAP,KAAAkE,MAAA3D,EAAA2D,QAGAF,EAAA/D,UAAA,KACAf,EAAAmF,IAAAL,EAAA/D,UAAA,KAAAD,IAAA,IAAAO,EAAAX,MAAAsE,MAAA3D,EAAA2D,QAEA/E,EAAAkF,IAAAL,EAAA/D,UAAA,KAAAD,IAAA,IAAAO,EAAAX,MAAAsE,MAAA3D,EAAA2D,SAIAZ,EAAAgB,WAAA,SAAAN,EAAAjD,EAAAwD,GACA,GAAAd,IAAAS,MAAAK,EAKA,OAJA,cAAAxD,EAAAC,eACAyC,EAAAc,GAGAxD,EAAAf,IACAuD,EAAA,OAAAxC,EAAAf,IAAAyD,GAGAO,EAAA/D,UAAA,KACAf,EAAAsF,KAAAR,EAAA/D,UAAA,KAAAD,IAAA,IAAAe,EAAAnB,KAAA6D,GAEAtE,EAAAqF,KAAAR,EAAA/D,UAAA,KAAAD,IAAA,IAAAe,EAAAnB,KAAA6D,IAIAH","file":"angular-wot.min.js","sourcesContent":["var wot = angular.module(\"wot\",['coap']);\r\n","angular.module(\"wot\").factory('TdParser', ['$http', 'CoAP',\r\n    function TdParserFactory($http, CoAP) {\r\n        var TdParser = {};\r\n\r\n        var numericTypes = [\r\n            'xsd:byte',\r\n            'xsd:float',\r\n            'xsd:decimal',\r\n            'xsd:int',\r\n            'xsd:long',\r\n            'xsd:unsignedByte',\r\n            'xsd:unsignedShort'\r\n        ];\r\n\r\n        TdParser.isNumericType = function isNumericType(xsdType) {\r\n            return numericTypes.indexOf(xsdType) != -1;\r\n        }\r\n        \r\n        var createThingfromOldTd =  function createThingfromOldTd(parsedTd) {\r\n            var newThing = {\r\n                'name': parsedTd.metadata.name,\r\n                'properties': [],\r\n                'actions': [],\r\n                'uri': (parsedTd.metadata.protocols.HTTP) ? parsedTd.metadata.protocols.HTTP.uri : parsedTd.metadata.protocols.CoAP.uri, //FIXME dodgy\r\n                'protocols': parsedTd.metadata.protocols\r\n            };\r\n\r\n            //add all properties\r\n            parsedTd.interactions\r\n                .filter(function isProperty(interaction) {\r\n                    return interaction[\"@type\"] == \"Property\";\r\n                })\r\n                .forEach(function addProperty(property) {\r\n                    newThing.properties.push({\r\n                        'name': property.name,\r\n                        'writable': property.writable,\r\n                        'xsdType': property.outputData,\r\n                        'autoUpdate': false,\r\n                        'history': [],\r\n                        'parent': newThing,\r\n                        'isNumeric': TdParser.isNumericType(property.outputData)\r\n                    });\r\n                });\r\n\r\n            //add actions\r\n            parsedTd.interactions\r\n                .filter(function isAction(interaction) {\r\n                    return interaction[\"@type\"] == \"Action\";\r\n                })\r\n                .forEach(function addAction(action) {\r\n                    newThing.actions.push({\r\n                        'name': action.name,\r\n                        'xsdParamType': action.inputData,\r\n                        'xsdReturnType': action.outputData,\r\n                        'parent': newThing\r\n                    });\r\n                });\r\n\r\n            return newThing;\r\n        }\r\n\r\n        var chooseUriIndex = function chooseUriIndex(uriArray) {\r\n            prefIdx = -1;\r\n            for(i=0;i<uriArray.length;i++) {\r\n                var uri = uriArray[i];\r\n                var scheme = uri.substring(0,uri.indexOf(':'));\r\n                if(scheme === 'http')\r\n                    return i;\r\n                else if (scheme === 'coap')\r\n                    prefIdx = i;\r\n            };\r\n            return prefIdx;\r\n            \r\n        }\r\n\r\n        var pathConcat = function pathConcat(left, right) {\r\n            if(left.slice(-1) === '/') {\r\n               return left + right; \r\n            } else {\r\n                return left + '/' + right;\r\n            }\r\n        }\r\n\r\n        var createThingfromNewTd =  function createThingfromNewTd(parsedTd) {\r\n            var uriArray = ( parsedTd.uris instanceof Array ) ? parsedTd.uris : [parsedTd.uris];\r\n            var uriIndex = chooseUriIndex(uriArray);\r\n            if(uriIndex === -1) throw Error(\"no suitable Protocols found\")\r\n            var newThing = {\r\n                'name': parsedTd.name,\r\n                'properties': [],\r\n                'actions': [],\r\n                'uri': uriArray[uriIndex]\r\n            };\r\n\r\n            //add all properties\r\n            if(parsedTd.properties) parsedTd.properties\r\n                .forEach(function addProperty(property) {\r\n                    newThing.properties.push({\r\n                        'name': property.name,\r\n                        'writable': property.writable,\r\n                        'xsdType': property.valueType,\r\n                        'type': property.valueType['type'],\r\n                        'uri': pathConcat(newThing.uri,property.hrefs[uriIndex]),\r\n                        'autoUpdate': false,\r\n                        'history': [],\r\n                        'parent': newThing,\r\n                        'isNumeric': TdParser.isNumericType(property.valueType),\r\n                        'properties': property.valueType['properties']\r\n                    });\r\n                });\r\n\r\n            //add actions\r\n            if(parsedTd.actions) parsedTd.actions\r\n                .forEach(function addAction(action) {\r\n                    var paramType = (action.inputData) ? action.inputData.valueType['type'] :\"\";\r\n                    \r\n                    newThing.actions.push({\r\n                        'name': action.name,\r\n                        'xsdParamType': paramType, //misleading name: xsd\r\n                        'numericParamType': TdParser.isNumericType(paramType), //Unused in UI\r\n                        'inputProperties': (action.inputData) ? action.inputData.valueType['properties'] :\"\",\r\n                        'xsdReturnType': (action.outputData) ? action.outputData.valueType['type'] : \"\", //should not be xsd\r\n                        'parent': newThing,\r\n                        'uri' : pathConcat(newThing.uri,action.hrefs[uriIndex])\r\n                    });\r\n                });\r\n\r\n            return newThing;\r\n        }\r\n\r\n       TdParser.createThing = function dualParseTD(tdObj){\r\n            if(tdObj.metadata)\r\n                return createThingfromOldTd(tdObj);\r\n               else\r\n                return createThingfromNewTd(tdObj);\r\n        }\r\n\r\n        TdParser.fromUrl = function fromUrl(url) {\r\n            if (url.substring(0, 4) == 'coap') {\r\n                return CoAP.get(url)\r\n                    .then(function(res) {\r\n                        return JSON.parse(res)\r\n                    })\r\n                    .then(TdParser.createThing)\r\n            } else\r\n                return $http.get(url).then(function(res) {\r\n                    return res.data\r\n                }).then(TdParser.createThing)\r\n        }\r\n\r\n        TdParser.parseJson = function parseJson(json) {\r\n            // TODO actually parse as JSON-LD, e.g. using io-informatics/angular-jsonld\r\n            var td = JSON.parse(json);\r\n            return TdParser.createThing(td);\r\n        }\r\n\r\n        return TdParser;\r\n    }\r\n]);\r\n","angular.module(\"wot\").factory('ThingClient', ['$http', 'CoAP',\r\n    function ThingClientFactory($http, CoAP) {\r\n        var ThingClient = {};\r\n\r\n        var restcall = function restcall(method, uri, payload) {\r\n            var scheme = uri.substring(0, uri.indexOf(':'));\r\n            if (scheme === 'http') {\r\n                var req = {\r\n                    'method': method,\r\n                    'url': uri,\r\n                    'data': payload\r\n                };\r\n                return $http(req);\r\n            } else if (scheme === 'coap') {\r\n                return CoAP.doCoapReq(method, uri, JSON.stringify(payload))\r\n                    .then($http.defaults.transformResponse);\r\n            } else\r\n                throw Error('unknown uri scheme')\r\n        }\r\n\r\n        ThingClient.readProperty = function readProperty(thing, property) {\r\n            function applyNewValue(value) {\r\n                property.value = value;\r\n                property.history.push(value);\r\n\r\n                //ensure size\r\n                while (property.history.length >= 20) property.history.shift();\r\n            }\r\n\r\n            if (property.uri) {\r\n                return restcall('GET', property.uri)\r\n                    .then(function (res) {\r\n                        if (res.data)\r\n                            return res.data.value;\r\n                        else\r\n                            return JSON.parse(res).value;\r\n\r\n                    })\r\n                    .then(applyNewValue);\r\n            }\r\n\r\n            if (thing.protocols['HTTP']) {\r\n                return $http.get(thing.protocols['HTTP'].uri + \"/\" + property.name)\r\n                    .then(function (res) { return res.data.value })\r\n                    .then(applyNewValue);\r\n            } else if (thing.protocols['CoAP']) {\r\n                return CoAP.get(thing.protocols['CoAP'].uri + \"/\" + property.name)\r\n                    .then(function (res) {\r\n                        return JSON.parse(res.payload).value\r\n                    })\r\n                    .then(applyNewValue);\r\n            }\r\n        }\r\n\r\n        ThingClient.writeProperty = function writeProperty(thing, property) {\r\n            if (property.uri) {\r\n                return restcall('PUT', property.uri, { \"value\": property.value })\r\n            }\r\n\r\n            if (thing.protocols['HTTP']) {\r\n                return $http.put(thing.protocols['HTTP'].uri + \"/\" + property.name, { \"value\": property.value })\r\n            } else {\r\n                return CoAP.put(thing.protocols['CoAP'].uri + \"/\" + property.name, { \"value\": property.value })\r\n            }\r\n        }\r\n\r\n        ThingClient.callAction = function callAction(thing, action, param) {\r\n            var payload = { \"value\": param };\r\n            if (action.xsdParamType === 'WoTScript') {\r\n                payload = param;\r\n            };\r\n\r\n            if (action.uri) {\r\n                return restcall('POST', action.uri, payload)\r\n            }\r\n\r\n            if (thing.protocols['HTTP']) {\r\n                return $http.post(thing.protocols['HTTP'].uri + \"/\" + action.name, payload);\r\n            } else {\r\n                return CoAP.post(thing.protocols['CoAP'].uri + \"/\" + action.name, payload);\r\n            }\r\n        }\r\n\r\n        return ThingClient;\r\n    }\r\n]);\r\n"],"sourceRoot":"/source/"}